\ Pleonasmo DZX                                                 \ Version A-00-201503170017                                     \ By Marcos Cruz (programandala.net)                            \ http://programandala.net/en.program.pleonasmo.html            \ Acknowledgment                                                \ This assembler was designed in the 1980's by Coos Haak for    \ his own Forth; L. C.  Benschop used it for his ZX Spectrum    \ Forth-83 System (1988).                                       \                                                               \ Pleonasmo DZX is a port for DZX-Forth                         \ (http://programandala.net/en.program.dzx-forth.html).         \ Some changes and enhancements were done during the            \ conversion.                                                   \ 2015-03-17: Start, based on Pleonasmo AF.                                                                                                                                                     ( Title, tools )                                                CR .( Loading Pleonasmo DZX) CR                                 : 8* 2* 2* 2* ;                                                 : ?PAIRS  ( n1 nocabulary, registers )                                       VOCABULARY ASSEMBLER IMMEDIATE DEFINITIONS HEX                  0 CONSTANT B 1 CONSTANT C 2 CONSTANT D 3 CONSTANT E             4 CONSTANT H 5 CONSTANT L 6 CONSTANT (HL)                       7 CONSTANT A 6 CONSTANT SP 6 CONSTANT AF                        0 CONSTANT BC 2 CONSTANT DE 4 CONSTANT HL                       DD CONSTANT IX-OP FD CONSTANT IY-OP                             VARIABLE XY  : %X IX-OP XY ! ; : %Y IY-OP XY ! ;                : XY, XY @ C, ; : XL XY, L ; : XH XY, H ;                       : IX IX-OP C, HL ; : IY IY-OP C, HL ;                           : ?PAGE  ( n -- ) DUP 80 + FF SWAP U<                             ABORT" BRANCH TOO LONG" ;                                     -->                                                                                                                                                                                                                                                             ( Words for defining the Z80 instructions)                      : M1 ( n "name" -- ) CREATE C, DOES> C@ C, ;                    : M2 ( n "name" -- ) CREATE C, DOES> C@ + C, ;                  : M3 ( n "name" -- ) CREATE C, DOES> C@ SWAP 8* + C, ;          : M4 ( n "name" -- ) CREATE C, DOES> C@ C, C, ;                 : M5 ( n "name" -- ) CREATE C, DOES> C@ C, , ;                  : M6 ( n "name" -- ) CREATE C, DOES> CB C, C@ + C, ;            : M7 ( n "name" -- ) CREATE C, DOES> CB C, C@ + SWAP 8* + C, ;  : M8 ( n "name" -- ) CREATE , DOES> @ , ;                       : M9 ( n "name" -- ) \ Relative jumps                             CREATE C, DOES> C@ C, HERE 1+ - ?PAGE C, ;                    : MA ( n "name" -- ) CREATE C, DOES> XY, C@ C, C, ;             : MB ( n "name" -- ) CREATE C, DOES> XY, CB C, C@ SWAP C, C, ;  : MC ( n "name" -- )                                              CREATE C, DOES> XY, CB C, C@ ROT ROT C, 8* + C, ; -->                                                                         ( Opcodes )                                                     00 M1 NOP 02 M3 STAP 03 M3 INC 04 M3 INR 05 M3 DER 07 M1 RLCA   08 M1 EXAF 09 M3 ADDP 0A M3 LDAP 0B M3 DEC 0F M1 RRCA           10 M9 DJNZ 17 M1 RLA 18 M9 JR  1F M1 RRA 20 M9 JRNZ 22 M5 STHL  27 M1 DAA 28 M9 JRZ 2A M5 LDHL 2F M1 CPL 30 M9 JRNC 32 M5 STA   37 M1 SCF 38 M9 JRC 3A M5 LDA 3F M1 CCF 76 M1 HALT 80 M2 ADD    88 M2 ADC 90 M2 SUB 98 M2 SBC B8 M2 CP C1 M3 POP C2 M5 JPNZ     C3 M5 JP C5 M3 PUSH C6 M4 ADD# C7 M2 RST C9 M1 RET CA M5 JPZ    CD M5 CALL CE M4 ADC# D2 M5 JPNC D3 M4 OUT 41 M3 OUTBC          D6 M4 SUB# D9 M1 EXX DA M5 JPC DB M4 IN 40 M3 INBC DE M4 SBC#   E2 M5 JPPO E3 M1 EXSP E6 M4 AND# E9 M1 JPHL EA M5 JPPE          EB M1 EXDE EE M4 XOR# F2 M5 JPP F3 M1 DI  F6 M4 OR# F9 M1 LDSP  FA M5 JPM FB M1 EI FE M4 CP# 00 M6 RLC 08 M6 RRC 10 M6 RL       18 M6 RR 20 M6 SLA  28 M6 SRA 38 M6 SRL  40 M7 BIT 80 M7 RES    C0 M7 SET B0ED M8 LDIR B8ED M8 LDDR 44ED M8 NEG 57ED M8 LDAI    47ED M8 LDIA 56ED M8 IM1 5EED M8 IM2 B1ED M8 CPIR -->           ( Opcodes)                                                      : 0OUTBC ED C, 71 C, ;                                          : JPIX IX-OP C, JPHL ;                                          : LDP# ( 16b rps -- ) 8* 1+ C,  , ;                             : LDIX# ( 16b rps -- ) 8* 1+ C,  , ; \ XXX TODO                 : LD# ( 8b r -- ) 8* 06 + C, C, ;                               : LD ( r1 r2 -- ) 8* 40 + + C, ;                                : SBCP ED C, 8* 42 + C, ;                                       : ADCP ED C, 8* 4A + C, ;                                       : STP ED C, 8* 43 + C, , ;                                      : LDP ED C, 8* 4B + C, , ;                                      : CLR 0 SWAP LDP# ;                                             : MOV 2DUP LD 1+ SWAP 1+ SWAP LD ;                              CF M4 HOOK \ RST 8                                              D7 M1 PRT  \ RST 0x16                                           -->                                                             ( Index register opcodes)                                       86 MA )ADD 8E MA )ADC 96 MA )SUB 9E MA )SBC A6 MA )AND          AE MA )XOR B6 MA )OR  BE MA )CP  34 MA )INR 35 MA )DER          06 MB )RLC 0E MB )RRC 16 MB )RL  1E MB )RR  26 MB )SLA          2E MB )SRA 3E MB )SRL 46 MC )BIT 86 MC )RES C6 MC )SET          : )LD XY, SWAP 8* 46 + C, C, ;                                  : )ST XY, SWAP 70 + C, C, ; : )LD# XY, 36 C, C, C, ;            : )LDP OVER 1+ OVER )LD 1+ )LD ;                                : )STP OVER 1+ OVER )ST 1+ )ST ;                                -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( Condition codes, conditional RET and CALL)                    20 CONSTANT Z  28 CONSTANT NZ 30 CONSTANT CY 38 CONSTANT NC     C2 CONSTANT z'  CA CONSTANT nz' D2 CONSTANT cy' DA CONSTANT nc' E2 CONSTANT pe' EA CONSTANT po' F2 CONSTANT m' FA CONSTANT p'   : ?RET 8 XOR 2- C, ;                                            : RETC cy' ?RET ; : RETNC nc' ?RET ;                            : RETZ z' ?RET ; : RETNZ nz' ?RET ;                             : RETM m' ?RET ; : RETP p' ?RET ;                               : RETPE pe' ?RET ; : RETPO po' ?RET ;                           : ?CALL 8 XOR 2+ C, , ;                                         : CALLC cy' ?CALL ; : CALLNC nc' ?CALL ;                        : CALLZ z' ?CALL ; : CALLNZ nz' ?CALL ;                         : CALLM m' ?CALL ; : CALLP p' ?CALL ;                           : CALLPE pe' ?CALL ; : CALLPO po' ?CALL ; -->                                                                                                                                                   ( Control structures)                                           : THEN 0A ?PAIRS HERE 1- OVER - ?PAGE SWAP C! ;                 : IF , HERE 1- 0A ;                                             : ELSE 0A ?PAIRS 18 IF ROT SWAP THEN 0A ;                       : UNTIL , 0B ?PAIRS 1- HERE 1- SWAP OVER - ?PAGE SWAP C! ;      : BEGIN HERE 0B ;  : AGAIN 18 UNTIL ;                           : DSZ 10 UNTIL ;   : REPEAT 2SWAP AGAIN 2- THEN ;               : WHILE IF 2+ ;                                                 : then' 08 ?PAIRS HERE SWAP ! ;  : if' C, HERE 0 , 08 ;         : else' 08 ?PAIRS C3 if' ROT SWAP then' 08 ;                    : begin' HERE 09 ;  : until' C, 09 ?PAIRS , ;                   : while' if' 2+ ;    : again' C3 until' ;                       : repeat' 2SWAP again' 2- then' ; -->                                                                                                                                                                                                                           ( Last opcodes, defining words)                                 A0 M2 AND  B0 M2 OR  A8 M2 XOR                                  : SUBP A AND SBCP ;  : TST DUP A LD 1+ OR ;                     : END-CODE ( -- )                                                 'NEXT JP  DECIMAL POSTPONE FORTH DEFINITIONS ?CSP SMUDGE ;    : ;C END-CODE ;                                                 FORTH DEFINITIONS                                               : ASM ( -- ) POSTPONE ASSEMBLER HEX IX !CSP ;                   : LABEL ( "name" -- ) CREATE ASM ;                              : CODE ( "name" -- ) CREATE ASM ;                               : ;CODE ( -- ) POSTPONE (;CODE) ?CSP ASM POSTPONE [ ; IMMEDIATE FORTH DEFINITIONS DECIMAL                                                                                                                                                                                                                                                                                                       